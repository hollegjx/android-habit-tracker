package com.example.cur_app.data.database

import androidx.room.Database
import androidx.room.Room
import androidx.room.RoomDatabase
import androidx.room.TypeConverters
import androidx.room.migration.Migration
import androidx.sqlite.db.SupportSQLiteDatabase
import android.content.Context
import android.util.Log
import com.example.cur_app.data.database.entities.*
import com.example.cur_app.data.database.dao.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay

/**
 * AIÊâìÂç°ËøΩË∏™Â∫îÁî®‰∏ªÊï∞ÊçÆÂ∫ì
 * ‰ΩøÁî®RoomÊåÅ‰πÖÂåñÊ°ÜÊû∂ÁÆ°ÁêÜÊú¨Âú∞Êï∞ÊçÆ
 */
@Database(
    entities = [
        CheckInItemEntity::class,
        CheckInRecordEntity::class,
        AiCharacterEntity::class,
        AiConversationEntity::class,
        UserAchievementEntity::class,
        AchievementProgressEntity::class,
        LevelDefinitionEntity::class,
        ChatMessageEntity::class,
        ChatConversationEntity::class,
        ChatUserEntity::class,
        FriendshipEntity::class,
        FriendNotificationEntity::class,
        ConversationEntity::class,
        ConversationParticipantEntity::class,
        MessageEntity::class
    ],
    version = 8,
    exportSchema = false
)
@TypeConverters(DatabaseConverters::class)
abstract class HabitTrackerDatabase : RoomDatabase() {
    
    // DAOËÆøÈóÆÊé•Âè£
    abstract fun checkInItemDao(): CheckInItemDao
    abstract fun checkInRecordDao(): CheckInRecordDao
    abstract fun aiCharacterDao(): AiCharacterDao
    abstract fun aiConversationDao(): AiConversationDao
    abstract fun userAchievementDao(): UserAchievementDao
    abstract fun achievementProgressDao(): AchievementProgressDao
    abstract fun levelDefinitionDao(): LevelDefinitionDao
    abstract fun chatMessageDao(): ChatMessageDao
    abstract fun chatConversationDao(): ChatConversationDao
    abstract fun chatUserDao(): ChatUserDao
    abstract fun friendshipDao(): FriendshipDao
    abstract fun friendNotificationDao(): FriendNotificationDao
    abstract fun conversationDao(): ConversationDao
    abstract fun conversationParticipantDao(): ConversationParticipantDao
    abstract fun messageDao(): MessageDao
    
    companion object {
        @Volatile
        private var INSTANCE: HabitTrackerDatabase? = null
        
        private const val DATABASE_NAME = "habit_tracker_database"
        
        /**
         * Êï∞ÊçÆÂ∫ìËøÅÁßªÔºö‰ªéÁâàÊú¨5Âà∞ÁâàÊú¨6
         * Ê∑ªÂä†AIËßíËâ≤Ë°®ÁöÑÊñ∞Â≠óÊÆµ
         */
        private val MIGRATION_5_6 = object : Migration(5, 6) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // ‰∏∫AIËßíËâ≤Ë°®Ê∑ªÂä†Êñ∞Â≠óÊÆµ
                database.execSQL("ALTER TABLE ai_characters ADD COLUMN characterId TEXT NOT NULL DEFAULT ''")
                database.execSQL("ALTER TABLE ai_characters ADD COLUMN subtitle TEXT NOT NULL DEFAULT ''")
                database.execSQL("ALTER TABLE ai_characters ADD COLUMN iconEmoji TEXT NOT NULL DEFAULT ''")
                database.execSQL("ALTER TABLE ai_characters ADD COLUMN backgroundColors TEXT NOT NULL DEFAULT ''")
                database.execSQL("ALTER TABLE ai_characters ADD COLUMN skills TEXT NOT NULL DEFAULT ''")
                
                // Êõ¥Êñ∞Áé∞ÊúâÊï∞ÊçÆ‰∏∫ÈªòËÆ§ÂÄº
                database.execSQL("""
                    UPDATE ai_characters 
                    SET characterId = CASE 
                        WHEN name = 'Â∞èÈºìÂä±' THEN 'encourager'
                        WHEN name = '‰∏•Â∏à' THEN 'strict_mentor'  
                        WHEN name = 'Â∞è‰ºô‰º¥' THEN 'friend'
                        WHEN name = 'Êô∫ËÄÖ' THEN 'mentor'
                        ELSE lower(replace(name, ' ', '_'))
                    END,
                    subtitle = CASE
                        WHEN name = 'Â∞èÈºìÂä±' THEN 'Ê∏©ÊöñÈºìÂä±ËÄÖ'
                        WHEN name = '‰∏•Â∏à' THEN '‰∏•Ê†ºÂØºÂ∏à'
                        WHEN name = 'Â∞è‰ºô‰º¥' THEN '‰∫≤ÂàáÊúãÂèã'
                        WHEN name = 'Êô∫ËÄÖ' THEN 'ÁùøÊô∫ÂØºÂ∏à'
                        ELSE '‰∏™ÊÄß‰ºô‰º¥'
                    END,
                    iconEmoji = CASE
                        WHEN name = 'Â∞èÈºìÂä±' THEN 'üòä'
                        WHEN name = '‰∏•Â∏à' THEN 'üéØ'
                        WHEN name = 'Â∞è‰ºô‰º¥' THEN 'üë•'
                        WHEN name = 'Êô∫ËÄÖ' THEN 'üßô‚Äç‚ôÇÔ∏è'
                        ELSE 'ü§ñ'
                    END,
                    backgroundColors = '["#ff9a9e", "#fecfef"]',
                    skills = '["Êô∫ËÉΩÂä©Êâã", "Èô™‰º¥ÊîØÊåÅ"]'
                """)
            }
        }
        
        /**
         * Êï∞ÊçÆÂ∫ìËøÅÁßªÔºö‰ªéÁâàÊú¨6Âà∞ÁâàÊú¨7
         * Ê∑ªÂä†ËÅäÂ§©Áõ∏ÂÖ≥Ë°®
         */
        private val MIGRATION_6_7 = object : Migration(6, 7) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // ÂàõÂª∫ËÅäÂ§©Áî®Êà∑Ë°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `chat_users` (
                        `userId` TEXT NOT NULL,
                        `nickname` TEXT NOT NULL,
                        `realName` TEXT NOT NULL DEFAULT '',
                        `avatar` TEXT NOT NULL,
                        `bio` TEXT NOT NULL DEFAULT '',
                        `email` TEXT NOT NULL DEFAULT '',
                        `phone` TEXT NOT NULL DEFAULT '',
                        `isAiBot` INTEGER NOT NULL DEFAULT 0,
                        `aiType` TEXT,
                        `aiPersonality` TEXT NOT NULL DEFAULT '',
                        `aiCapabilities` TEXT NOT NULL DEFAULT '',
                        `isOnline` INTEGER NOT NULL DEFAULT 0,
                        `lastSeenTime` INTEGER NOT NULL,
                        `status` TEXT NOT NULL DEFAULT 'available',
                        `statusMessage` TEXT NOT NULL DEFAULT '',
                        `language` TEXT NOT NULL DEFAULT 'zh-CN',
                        `timezone` TEXT NOT NULL DEFAULT 'Asia/Shanghai',
                        `notificationSettings` TEXT NOT NULL DEFAULT '',
                        `totalMessages` INTEGER NOT NULL DEFAULT 0,
                        `totalConversations` INTEGER NOT NULL DEFAULT 0,
                        `averageResponseTime` INTEGER NOT NULL DEFAULT 0,
                        `isVerified` INTEGER NOT NULL DEFAULT 0,
                        `verificationLevel` TEXT NOT NULL DEFAULT 'none',
                        `createdAt` INTEGER NOT NULL,
                        `updatedAt` INTEGER NOT NULL,
                        PRIMARY KEY(`userId`)
                    )
                """)
                
                // ÂàõÂª∫ËÅäÂ§©ÂØπËØùË°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `chat_conversations` (
                        `conversationId` TEXT NOT NULL,
                        `otherUserId` TEXT NOT NULL,
                        `conversationType` TEXT NOT NULL DEFAULT 'PRIVATE',
                        `title` TEXT NOT NULL DEFAULT '',
                        `description` TEXT NOT NULL DEFAULT '',
                        `lastMessage` TEXT NOT NULL DEFAULT '',
                        `lastMessageTime` INTEGER NOT NULL,
                        `lastMessageSenderId` TEXT NOT NULL DEFAULT '',
                        `lastMessageType` TEXT NOT NULL DEFAULT 'TEXT',
                        `unreadCount` INTEGER NOT NULL DEFAULT 0,
                        `isPinned` INTEGER NOT NULL DEFAULT 0,
                        `isArchived` INTEGER NOT NULL DEFAULT 0,
                        `isMuted` INTEGER NOT NULL DEFAULT 0,
                        `isBlocked` INTEGER NOT NULL DEFAULT 0,
                        `customAvatar` TEXT NOT NULL DEFAULT '',
                        `customName` TEXT NOT NULL DEFAULT '',
                        `theme` TEXT NOT NULL DEFAULT 'default',
                        `totalMessages` INTEGER NOT NULL DEFAULT 0,
                        `myMessages` INTEGER NOT NULL DEFAULT 0,
                        `otherMessages` INTEGER NOT NULL DEFAULT 0,
                        `createdAt` INTEGER NOT NULL,
                        `updatedAt` INTEGER NOT NULL,
                        PRIMARY KEY(`conversationId`)
                    )
                """)
                
                // ÂàõÂª∫ËÅäÂ§©Ê∂àÊÅØË°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `chat_messages` (
                        `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        `conversationId` TEXT NOT NULL,
                        `senderId` TEXT NOT NULL,
                        `receiverId` TEXT NOT NULL,
                        `content` TEXT NOT NULL,
                        `messageType` TEXT NOT NULL DEFAULT 'TEXT',
                        `metadata` TEXT NOT NULL DEFAULT '',
                        `isRead` INTEGER NOT NULL DEFAULT 0,
                        `isFromMe` INTEGER NOT NULL DEFAULT 0,
                        `isDeleted` INTEGER NOT NULL DEFAULT 0,
                        `isSent` INTEGER NOT NULL DEFAULT 1,
                        `timestamp` INTEGER NOT NULL,
                        `readTimestamp` INTEGER,
                        `editTimestamp` INTEGER,
                        `replyToMessageId` INTEGER,
                        `forwardFromMessageId` INTEGER,
                        `reactions` TEXT NOT NULL DEFAULT '',
                        `createdAt` INTEGER NOT NULL,
                        `updatedAt` INTEGER NOT NULL
                    )
                """)
                
                // ÂàõÂª∫Á¥¢Âºï
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_users_isAiBot` ON `chat_users` (`isAiBot`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_users_isOnline` ON `chat_users` (`isOnline`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_users_lastSeenTime` ON `chat_users` (`lastSeenTime`)")
                
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_conversations_otherUserId` ON `chat_conversations` (`otherUserId`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_conversations_lastMessageTime` ON `chat_conversations` (`lastMessageTime`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_conversations_isPinned_lastMessageTime` ON `chat_conversations` (`isPinned`, `lastMessageTime`)")
                
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_messages_conversationId` ON `chat_messages` (`conversationId`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_messages_timestamp` ON `chat_messages` (`timestamp`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_messages_senderId` ON `chat_messages` (`senderId`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_chat_messages_receiverId` ON `chat_messages` (`receiverId`)")
            }
        }
        
        /**
         * Êï∞ÊçÆÂ∫ìËøÅÁßªÔºö‰ªéÁâàÊú¨7Âà∞ÁâàÊú¨8
         * Ê∑ªÂä†Â•ΩÂèãÁ≥ªÁªüÁõ∏ÂÖ≥Ë°®
         */
        private val MIGRATION_7_8 = object : Migration(7, 8) {
            override fun migrate(database: SupportSQLiteDatabase) {
                // ÂàõÂª∫Â•ΩÂèãÂÖ≥Á≥ªË°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `friendships` (
                        `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        `requester_id` TEXT NOT NULL,
                        `addressee_id` TEXT NOT NULL,
                        `status` TEXT NOT NULL,
                        `requester_message` TEXT,
                        `reject_reason` TEXT,
                        `friendship_alias` TEXT,
                        `is_starred` INTEGER NOT NULL DEFAULT 0,
                        `is_muted` INTEGER NOT NULL DEFAULT 0,
                        `is_blocked` INTEGER NOT NULL DEFAULT 0,
                        `conversation_id` TEXT,
                        `unread_count` INTEGER NOT NULL DEFAULT 0,
                        `last_message_at` INTEGER,
                        `last_read_at` INTEGER,
                        `created_at` INTEGER NOT NULL,
                        `updated_at` INTEGER NOT NULL
                    )
                """)
                
                // ÂàõÂª∫Â•ΩÂèãÈÄöÁü•Ë°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `friend_notifications` (
                        `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        `friendship_id` INTEGER NOT NULL,
                        `user_id` TEXT NOT NULL,
                        `type` TEXT NOT NULL,
                        `message` TEXT,
                        `is_read` INTEGER NOT NULL DEFAULT 0,
                        `read_at` INTEGER,
                        `created_at` INTEGER NOT NULL,
                        `updated_at` INTEGER NOT NULL,
                        FOREIGN KEY(`friendship_id`) REFERENCES `friendships`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE
                    )
                """)
                
                // ÂàõÂª∫ÂØπËØùË°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `conversations` (
                        `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        `conversation_id` TEXT NOT NULL,
                        `type` TEXT NOT NULL DEFAULT 'private',
                        `name` TEXT,
                        `description` TEXT,
                        `avatar_url` TEXT,
                        `created_by` TEXT,
                        `is_active` INTEGER NOT NULL DEFAULT 1,
                        `last_message_at` INTEGER,
                        `created_at` INTEGER NOT NULL,
                        `updated_at` INTEGER NOT NULL
                    )
                """)
                
                // ÂàõÂª∫ÂØπËØùÂèÇ‰∏éËÄÖË°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `conversation_participants` (
                        `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        `conversation_id` INTEGER NOT NULL,
                        `user_id` TEXT NOT NULL,
                        `role` TEXT NOT NULL DEFAULT 'member',
                        `joined_at` INTEGER NOT NULL,
                        `last_read_at` INTEGER,
                        `is_muted` INTEGER NOT NULL DEFAULT 0,
                        `is_pinned` INTEGER NOT NULL DEFAULT 0,
                        `created_at` INTEGER NOT NULL,
                        `updated_at` INTEGER NOT NULL,
                        FOREIGN KEY(`conversation_id`) REFERENCES `conversations`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE
                    )
                """)
                
                // ÂàõÂª∫Ê∂àÊÅØË°®
                database.execSQL("""
                    CREATE TABLE IF NOT EXISTS `messages` (
                        `id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
                        `message_id` TEXT NOT NULL,
                        `conversation_id` INTEGER NOT NULL,
                        `sender_id` TEXT,
                        `content` TEXT NOT NULL,
                        `message_type` TEXT NOT NULL DEFAULT 'text',
                        `media_url` TEXT,
                        `media_metadata` TEXT,
                        `reply_to_id` INTEGER,
                        `is_edited` INTEGER NOT NULL DEFAULT 0,
                        `edited_at` INTEGER,
                        `is_deleted` INTEGER NOT NULL DEFAULT 0,
                        `deleted_at` INTEGER,
                        `is_read` INTEGER NOT NULL DEFAULT 0,
                        `read_at` INTEGER,
                        `is_delivered` INTEGER NOT NULL DEFAULT 0,
                        `delivered_at` INTEGER,
                        `reactions` TEXT,
                        `mentions` TEXT,
                        `sent_at` INTEGER NOT NULL,
                        `created_at` INTEGER NOT NULL,
                        `updated_at` INTEGER NOT NULL,
                        FOREIGN KEY(`conversation_id`) REFERENCES `conversations`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE
                    )
                """)
                
                // ÂàõÂª∫Á¥¢Âºï
                database.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS `index_friendships_requester_id_addressee_id` ON `friendships` (`requester_id`, `addressee_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friendships_status` ON `friendships` (`status`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friendships_conversation_id` ON `friendships` (`conversation_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friendships_last_message_at` ON `friendships` (`last_message_at`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friendships_is_starred` ON `friendships` (`is_starred`)")
                
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friend_notifications_user_id_is_read` ON `friend_notifications` (`user_id`, `is_read`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friend_notifications_type` ON `friend_notifications` (`type`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friend_notifications_friendship_id` ON `friend_notifications` (`friendship_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_friend_notifications_created_at` ON `friend_notifications` (`created_at`)")
                
                database.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS `index_conversations_conversation_id` ON `conversations` (`conversation_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversations_type` ON `conversations` (`type`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversations_last_message_at` ON `conversations` (`last_message_at`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversations_created_by` ON `conversations` (`created_by`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversations_is_active` ON `conversations` (`is_active`)")
                
                database.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS `index_conversation_participants_conversation_id_user_id` ON `conversation_participants` (`conversation_id`, `user_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversation_participants_user_id` ON `conversation_participants` (`user_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversation_participants_role` ON `conversation_participants` (`role`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_conversation_participants_joined_at` ON `conversation_participants` (`joined_at`)")
                
                database.execSQL("CREATE UNIQUE INDEX IF NOT EXISTS `index_messages_message_id` ON `messages` (`message_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_messages_conversation_id_sent_at` ON `messages` (`conversation_id`, `sent_at`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_messages_sender_id` ON `messages` (`sender_id`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_messages_message_type` ON `messages` (`message_type`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_messages_is_read` ON `messages` (`is_read`)")
                database.execSQL("CREATE INDEX IF NOT EXISTS `index_messages_reply_to_id` ON `messages` (`reply_to_id`)")
            }
        }
        
        /**
         * Ëé∑ÂèñÊï∞ÊçÆÂ∫ìÂÆû‰æãÔºàÂçï‰æãÊ®°ÂºèÔºâ
         */
        fun getDatabase(context: Context): HabitTrackerDatabase {
            return INSTANCE ?: synchronized(this) {
                val instance = Room.databaseBuilder(
                    context.applicationContext,
                    HabitTrackerDatabase::class.java,
                    DATABASE_NAME
                )
                    .addCallback(DatabaseCallback(context.applicationContext))
                    .addMigrations(MIGRATION_5_6, MIGRATION_6_7, MIGRATION_7_8)
                    .fallbackToDestructiveMigration()
                    .build()
                INSTANCE = instance
                instance
            }
        }
        
        /**
         * Ê∏ÖÁêÜÊï∞ÊçÆÂ∫ìÂÆû‰æãÔºà‰∏ªË¶ÅÁî®‰∫éÊµãËØïÔºâ
         */
        fun clearInstance() {
            INSTANCE = null
        }
        
        /**
         * Âº∫Âà∂ÈáçÂª∫Êï∞ÊçÆÂ∫ìÔºàÂà†Èô§Áé∞ÊúâÊï∞ÊçÆÂ∫ìÊñá‰ª∂Ôºâ
         * 
         * ‚ö†Ô∏è Ë≠¶ÂëäÔºöÊ≠§ÊñπÊ≥ï‰ªÖÁî®‰∫éÂºÄÂèëÂíåË∞ÉËØïÈò∂ÊÆµÔºÅ
         * Ë∞ÉÁî®Ê≠§ÊñπÊ≥ï‰ºöÊ∞∏‰πÖÂà†Èô§ÊâÄÊúâÁî®Êà∑Êï∞ÊçÆÔºåÊ≠£Â∏∏‰ΩøÁî®Êó∂‰∏çÂ∫îË∞ÉÁî®Ê≠§ÊñπÊ≥ï„ÄÇ
         * 
         * @param context Â∫îÁî®‰∏ä‰∏ãÊñá
         */
        fun forceRebuildDatabase(context: Context) {
            Log.d("HabitTrackerDatabase", "Âº∫Âà∂ÈáçÂª∫Êï∞ÊçÆÂ∫ì")
            try {
                // ÂÖ≥Èó≠Áé∞ÊúâËøûÊé•
                INSTANCE?.close()
                INSTANCE = null
                
                // Âà†Èô§Êï∞ÊçÆÂ∫ìÊñá‰ª∂
                val dbFile = context.getDatabasePath(DATABASE_NAME)
                if (dbFile.exists()) {
                    val deleted = dbFile.delete()
                    Log.d("HabitTrackerDatabase", "Êï∞ÊçÆÂ∫ìÊñá‰ª∂Âà†Èô§${if (deleted) "ÊàêÂäü" else "Â§±Ë¥•"}")
                }
                
                // Âà†Èô§Áõ∏ÂÖ≥ÁöÑjournalÊñá‰ª∂
                val journalFile = context.getDatabasePath("$DATABASE_NAME-journal")
                if (journalFile.exists()) {
                    journalFile.delete()
                }
                
                val walFile = context.getDatabasePath("$DATABASE_NAME-wal")
                if (walFile.exists()) {
                    walFile.delete()
                }
                
                val shmFile = context.getDatabasePath("$DATABASE_NAME-shm")
                if (shmFile.exists()) {
                    shmFile.delete()
                }
                
                Log.d("HabitTrackerDatabase", "Êï∞ÊçÆÂ∫ìÈáçÂª∫ÂÆåÊàêÔºå‰∏ãÊ¨°ËÆøÈóÆÂ∞ÜÈáçÊñ∞ÂàõÂª∫")
            } catch (e: Exception) {
                Log.e("HabitTrackerDatabase", "Êï∞ÊçÆÂ∫ìÈáçÂª∫Â§±Ë¥•: ${e.message}", e)
            }
        }
    }
    
    /**
     * Êï∞ÊçÆÂ∫ìÂõûË∞ÉÔºåÂ§ÑÁêÜÂàõÂª∫ÂíåÊâìÂºÄ‰∫ã‰ª∂
     */
    private class DatabaseCallback(private val context: Context) : RoomDatabase.Callback() {
        
        companion object {
            private const val TAG = "HabitTrackerDatabase"
        }
        
        override fun onCreate(db: androidx.sqlite.db.SupportSQLiteDatabase) {
            super.onCreate(db)
            Log.d(TAG, "Êï∞ÊçÆÂ∫ìonCreateË¢´Ë∞ÉÁî®ÔºåÂºÄÂßãÂàùÂßãÂåñ")
            // Êï∞ÊçÆÂ∫ìÈ¶ñÊ¨°ÂàõÂª∫Êó∂ÁöÑÂàùÂßãÂåñÊìç‰Ωú
            INSTANCE?.let { database ->
                Log.d(TAG, "Êï∞ÊçÆÂ∫ìÂÆû‰æãÂ≠òÂú®ÔºåÂêØÂä®ÂàùÂßãÂåñÂçèÁ®ã")
                CoroutineScope(Dispatchers.IO).launch {
                    // Âª∂Ëøü‰∏ÄÂ∞èÊÆµÊó∂Èó¥ÔºåÁ°Æ‰øùÊï∞ÊçÆÂ∫ìÂÆåÂÖ®ÂàùÂßãÂåñ
                    delay(100)
                    try {
                        Log.d(TAG, "Â∞ùËØï‰ΩøÁî®DefaultDataInitializerÂàùÂßãÂåñ")
                        // ‰ΩøÁî®DefaultDataInitializerËøõË°åÂÆåÊï¥ÁöÑÂàùÂßãÂåñ
                        DefaultDataInitializer.initializeDefaultItems(context, database)
                        Log.d(TAG, "DefaultDataInitializerÂàùÂßãÂåñÂÆåÊàê")
                    } catch (e: Exception) {
                        Log.e(TAG, "DefaultDataInitializerÂàùÂßãÂåñÂ§±Ë¥•: ${e.message}", e)
                        // Â¶ÇÊûúDefaultDataInitializerÂ§±Ë¥•Ôºå‰ΩøÁî®fallback
                        initializeFallbackData(database)
                    }
                }
            } ?: run {
                Log.e(TAG, "Êï∞ÊçÆÂ∫ìÂÆû‰æã‰∏∫nullÔºåÊó†Ê≥ïÂàùÂßãÂåñ")
            }
        }
        
        override fun onOpen(db: androidx.sqlite.db.SupportSQLiteDatabase) {
            super.onOpen(db)
            // ÊØèÊ¨°ÊâìÂºÄÊï∞ÊçÆÂ∫ìÊó∂ÁöÑÊìç‰Ωú
        }
        
        /**
         * ‰ΩøÁî®‰ª£Á†Å‰∏≠ÁöÑÂ§áÁî®ÈªòËÆ§Êï∞ÊçÆ
         */
        private suspend fun initializeFallbackData(database: HabitTrackerDatabase) {
            Log.d(TAG, "ÂºÄÂßã‰ΩøÁî®fallbackÊï∞ÊçÆÂàùÂßãÂåñ")
            try {
                val existingCount = database.checkInItemDao().getActiveItemCount()
                Log.d(TAG, "Áé∞ÊúâÈ°πÁõÆÊï∞Èáè: $existingCount")
                if (existingCount > 0) {
                    Log.d(TAG, "Â∑≤ÊúâÊï∞ÊçÆÔºåË∑≥ËøáfallbackÂàùÂßãÂåñ")
                    return // Â∑≤ÊúâÊï∞ÊçÆ
                }
                
                val fallbackItems = listOf(
                    CheckInItemEntity(
                        type = "STUDY",
                        title = "Ëã±ËØ≠ÂçïËØçËÉåËØµ", 
                        description = "ÊØèÂ§©ËÉåËØµÊñ∞ÂçïËØçÔºåÊèêÂçáËØçÊ±áÈáè",
                        targetValue = 30,
                        unit = "ÂàÜÈíü",
                        icon = "üìö",
                        color = "#667EEA",
                        experienceValue = 30,
                        isActive = true
                    ),
                    CheckInItemEntity(
                        type = "STUDY",
                        title = "ÁºñÁ®ãÁªÉ‰π†",
                        description = "ÂùöÊåÅÊØèÊó•ÁºñÁ®ãÔºåÊèêÈ´òÊäÄÊúØÊ∞¥Âπ≥",
                        targetValue = 90,
                        unit = "ÂàÜÈíü",
                        icon = "üíª",
                        color = "#667EEA",
                        experienceValue = 50,
                        isActive = true
                    ),
                    CheckInItemEntity(
                        type = "STUDY",
                        title = "ÈòÖËØª‰∏ì‰∏ö‰π¶Á±ç",
                        description = "ÊØèÂ§©ÈòÖËØª‰∏ì‰∏ö‰π¶Á±çÔºå‰∏∞ÂØåÁü•ËØÜÂÇ®Â§á",
                        targetValue = 45,
                        unit = "ÂàÜÈíü",
                        icon = "üìñ",
                        color = "#667EEA",
                        experienceValue = 40,
                        isActive = true
                    ),
                    CheckInItemEntity(
                        type = "EXERCISE",
                        title = "Êô®Ë∑ë",
                        description = "ÊØèÂ§©Êó©Êô®Ë∑ëÊ≠•ÈîªÁÇºÔºå‰øùÊåÅË∫´‰ΩìÂÅ•Â∫∑",
                        targetValue = 300,
                        unit = "ÂçÉÂç°", 
                        icon = "üèÉ",
                        color = "#FF7043",
                        experienceValue = 60,
                        isActive = true
                    ),
                    CheckInItemEntity(
                        type = "EXERCISE",
                        title = "ÂäõÈáèËÆ≠ÁªÉ",
                        description = "ËøõË°åÂäõÈáèËÆ≠ÁªÉÔºåÂ¢ûÂº∫ËÇåËÇâÂäõÈáè",
                        targetValue = 150,
                        unit = "ÂçÉÂç°",
                        icon = "üí™",
                        color = "#FF7043",
                        experienceValue = 50,
                        isActive = true
                    ),
                    CheckInItemEntity(
                        type = "MONEY",
                        title = "ÊØèÊó•ÂÇ®ËìÑ",
                        description = "ÊØèÂ§©Â≠ò‰∏ÄÁÇπÈí±ÔºåÁßØÂ∞ëÊàêÂ§ö",
                        targetValue = 50,
                        unit = "ÂÖÉ",
                        icon = "üí∞",
                        color = "#43A047",
                        experienceValue = 25,
                        isActive = true
                    ),
                    CheckInItemEntity(
                        type = "MONEY",
                        title = "ÁêÜË¥¢ÊäïËµÑ",
                        description = "ÂÆöÊúüËøõË°åÁêÜË¥¢ÊäïËµÑÔºåÂÆûÁé∞Ë¥¢ÂØåÂ¢ûÈïø",
                        targetValue = 200,
                        unit = "ÂÖÉ",
                        icon = "üìà",
                        color = "#43A047",
                        experienceValue = 35,
                        isActive = true
                    )
                )
                
                Log.d(TAG, "ÂáÜÂ§áÊèíÂÖ•${fallbackItems.size}‰∏™fallbackÈ°πÁõÆ")
                database.checkInItemDao().insertItems(fallbackItems)
                Log.d(TAG, "FallbackÊï∞ÊçÆÊèíÂÖ•ÊàêÂäü")
            } catch (e: Exception) {
                Log.e(TAG, "FallbackÊï∞ÊçÆÊèíÂÖ•Â§±Ë¥•: ${e.message}", e)
            }
        }
    }
} 